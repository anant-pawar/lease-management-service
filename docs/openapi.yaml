openapi: 3.0.3
info:
  title: Lease Management Service
  description: |-
    Provides endpoints for managing lease
    
     Some useful links:
     - [The Lease Management Service repository](https://github.com/anant-pawar/lease-management-service)

  contact:
    email: anant.c.pawar@gmail.com
  version: 0.0.1-SNAPSHOT
servers:
  - url: http://localhost:8080
tags:
  - name: Customer
    description: Customer management endpoints

paths:
  /customers:
    post:
      summary: Create a new customer
      operationId: createCustomer
      tags:
        - Customer
      consumes:
        - application/json
      requestBody:
        description: The customer to be created
        content:
          application/json:
            schema:
              $ref: '#/definitions/CustomerUpsert'
        required: true
      responses:
        201:
          description: Customer created successfully
        400:
          description: Bad request
    get:
      summary: Get a list of customers
      tags:
        - Customer
      produces:
        - application/json
      parameters:
        - in: query
          name: firstName
          description: Filter by first name (optional)
          required: false
          type: string
        - in: query
          name: lastName
          description: Filter by last name (optional)
          required: false
          type: string
        - in: query
          name: page
          description: "Page number (default: 0)"
          required: false
          type: integer
          default: 0
        - in: query
          name: size
          description: "Number of customers per page (default: 5)"
          required: false
          type: integer
          default: 5
      responses:
        200:
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/definitions/RecordsPageCustomer'
        400:
          description: Bad request
  /customers/{id}:
    get:
      summary: Get a customer by ID
      tags:
        - Customer
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the customer
          required: true
          type: string
      responses:
        200:
          description: The requested customer
          content:
            application/json:
              schema:
                $ref: '#/definitions/Customer'
        404:
          description: Customer not found
    put:
      summary: Update a customer by ID
      tags:
        - Customer
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of the customer
          required: true
          type: string
      requestBody:
        description: The customer to be updated
        content:
          application/json:
            schema:
              $ref: '#/definitions/CustomerUpsert'
      responses:
        204:
          description: Customer updated successfully
        400:
          description: Bad request

definitions:
  CustomerUpsert:
    type: object
    properties:
      firstName:
        type: string
        description: The customer's first name
        example: John
      lastName:
        type: string
        description: The customer's last name
        example: Doe
      birthDate:
        type: string
        format: date
        description: The customer's birth date (YYYY-MM-DD)
        example: 1990-01-15

  Customer:
    type: object
    properties:
      id:
        type: string
        description: The customer ID
        example: 1
      firstName:
        type: string
        description: The customer's first name
        example: John
      lastName:
        type: string
        description: The customer's last name
        example: Doe
      birthDate:
        type: string
        format: date
        description: The customer's birth date (YYYY-MM-DD)
        example: 1990-01-15

  RecordsPageCustomer:
    type: object
    properties:
      currentPage:
        type: integer
        format: int32
        example: 1
      totalItems:
        type: integer
        format: int64
        example: 10
      totalPages:
        type: integer
        format: int32
        example: 2
      records:
        type: array
        items:
          $ref: '#/definitions/Customer'
        example:
          - id: 1
            firstName: John
            lastName: Doe
            birthDate: 1990-01-15
          - id: 2
            firstName: Jane
            lastName: Smith
            birthDate: 1985-04-20
